{"version":3,"file":"Stream.js","sourceRoot":"","sources":["../../src/Stream.ts"],"names":[],"mappings":";AAAA,sDAAsD;AACtD,+GAA+G","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// This is an API that is similar to Observable, but we don't want users to confuse it for that so we rename things. Someone could\r\n// easily adapt it into the Rx interface if they wanted to. Unlike in C#, we can't just implement an \"interface\" and get extension\r\n// methods for free. The methods have to actually be added to the object (there are no extension methods in JS!). We don't want to\r\n// depend on RxJS in the core library, so instead we duplicate the minimum logic needed and then users can easily adapt these into\r\n// proper RxJS observables if they want.\r\n\r\nexport interface IStreamSubscriber<T> {\r\n    closed?: boolean;\r\n    next(value: T): void;\r\n    error(err: any): void;\r\n    complete(): void;\r\n}\r\n\r\nexport interface IStreamResult<T> {\r\n    subscribe(observer: IStreamSubscriber<T>): ISubscription<T>;\r\n}\r\n\r\nexport interface ISubscription<T> {\r\n    dispose(): void;\r\n}\r\n"]}